"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const socket_io_1 = __importDefault(require("socket.io"));
const DeviceManaged_1 = __importDefault(require("./DeviceManaged"));
class Manager {
    constructor(config) {
        this.devices = [];
        this.statusHandlers = new Map();
        this.proxySettings = [];
        this.config = config;
        this.socket = socket_io_1.default();
        this.socket.listen(this.config.port);
        this.socket.on('connection', socket => {
            this.initConnectedDevice(socket);
        });
    }
    destroy() {
        this.socket.close();
    }
    getDevices() {
        return this.devices;
    }
    onConnection(fn) {
        this.onConnectionHandler = fn;
    }
    onStatus(target, fn) {
        this.findTargets(target).forEach(device => {
            device.onStatus(fn);
        });
        this.statusHandlers.set(fn, target);
    }
    offStatus(target, fn) {
        this.findTargets(target).forEach(device => {
            device.offStatus(fn);
        });
        this.statusHandlers.delete(fn);
    }
    sendAction(actionConfig, payload) {
        const target = this.findTargets(actionConfig);
        if (target.length === 0) {
            throw new Error('Action ' + actionConfig.action + ' target not found!');
        }
        target.forEach((d) => {
            d.sendAction(actionConfig.action, payload);
        });
    }
    proxy(config) {
        this.proxySettings.push(config);
        const found = this.findTargets(config);
        found.forEach(device => {
            device.addProxy(config.servers);
        });
    }
    findTargets(targetConfig) {
        return this.devices.filter(d => d.matchesTarget(targetConfig));
    }
    initConnectedDevice(socket) {
        const device = new DeviceManaged_1.default(Object.assign({}, socket.handshake.query, { socket }));
        this.devices.push(device);
        this.setStatusHandlers(device);
        this.setProxies(device);
        socket.on('disconnect', () => this.destroyDisconnectedDevice(socket));
        if (this.onConnectionHandler) {
            this.onConnectionHandler(device);
        }
    }
    setProxies(device) {
        this.proxySettings.forEach(config => {
            if (device.matchesTarget(config)) {
                device.addProxy(config.servers);
            }
        });
    }
    setStatusHandlers(device) {
        this.statusHandlers.forEach((target, fn) => {
            if (device.matchesTarget(target)) {
                device.onStatus(fn);
            }
        });
    }
    destroyDisconnectedDevice(socket) {
        const found = this.devices.findIndex(d => d.getSocket() === socket);
        this.devices.splice(found, 1);
    }
}
exports.Manager = Manager;
//# sourceMappingURL=data:application/json;base64,