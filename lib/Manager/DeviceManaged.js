"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const socket_io_client_1 = __importDefault(require("socket.io-client"));
class DeviceManaged {
    constructor(info) {
        this.proxies = [];
        this.socket = info.socket;
        this.name = info.name;
        this.type = info.type;
        this.patch = require('socketio-wildcard')(socket_io_client_1.default.Manager);
        this.socket.on('disconnect', () => {
            this.disconnectProxies();
        });
        this.socket.on('status', this.emitStatusToProxies.bind(this));
    }
    getName() {
        return this.name;
    }
    getType() {
        return this.type;
    }
    getSocket() {
        return this.socket;
    }
    matchesTarget(target) {
        return target.name === this.name || target.type === this.type;
    }
    sendAction(action, payload) {
        this.socket.emit(action, payload);
    }
    onStatus(fn) {
        this.socket.on('status', fn);
    }
    offStatus(fn) {
        this.socket.removeListener('status', fn);
    }
    connected() {
        return this.socket.connected;
    }
    destroy() {
        this.socket.disconnect();
        this.disconnectProxies();
    }
    addProxy(servers) {
        servers.forEach(config => {
            const client = socket_io_client_1.default.connect(`http://${config.host}:${config.port}`, {
                query: {
                    name: this.name,
                    type: this.type,
                },
            });
            this.initProxyMiddleware(client);
            this.proxies.push(client);
        });
    }
    initProxyMiddleware(proxy) {
        this.patch(proxy);
        proxy.on('*', (event) => {
            this.socket.emit(event.data.shift(), ...event.data);
        });
    }
    emitStatusToProxies(status) {
        this.proxies.forEach(proxy => {
            proxy.emit('status', status);
        });
    }
    disconnectProxies() {
        this.proxies.forEach(proxy => {
            proxy.disconnect();
        });
    }
}
exports.default = DeviceManaged;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGV2aWNlTWFuYWdlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9NYW5hZ2VyL0RldmljZU1hbmFnZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFBa0M7QUFNbEMsTUFBcUIsYUFBYTtJQU9oQyxZQUFtQixJQUF5QjtRQUhwQyxZQUFPLEdBQTRCLEVBQUUsQ0FBQztRQUk1QyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLDBCQUFFLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtZQUNoQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVNLFNBQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDckIsQ0FBQztJQUVNLGFBQWEsQ0FBQyxNQUFvQjtRQUN2QyxPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxNQUFNLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDaEUsQ0FBQztJQUVNLFVBQVUsQ0FBQyxNQUFjLEVBQUUsT0FBWTtRQUM1QyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVNLFFBQVEsQ0FBQyxFQUFrQztRQUNoRCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVNLFNBQVMsQ0FBQyxFQUFrQztRQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVNLFNBQVM7UUFDZCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO0lBQy9CLENBQUM7SUFFTSxPQUFPO1FBQ1osSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBQ00sUUFBUSxDQUFDLE9BQTZCO1FBQzNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdkIsTUFBTSxNQUFNLEdBQUcsMEJBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxNQUFNLENBQUMsSUFBSSxJQUFJLE1BQU0sQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDaEUsS0FBSyxFQUFFO29CQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtvQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7aUJBQ2hCO2FBQ0YsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLG1CQUFtQixDQUFDLEtBQTRCO1FBQ3RELElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFzQixFQUFFLEVBQUU7WUFDdkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxNQUFvQjtRQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMzQixLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxpQkFBaUI7UUFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDM0IsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBdEZELGdDQXNGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBpbyBmcm9tICdzb2NrZXQuaW8tY2xpZW50JztcbmltcG9ydCB7IERldmljZVNlcnZlckNvbmZpZyB9IGZyb20gJy4uL0RldmljZS9EZXZpY2UnO1xuaW1wb3J0IHsgRGV2aWNlU3RhdHVzIH0gZnJvbSAnLi4vRGV2aWNlL1N0YXR1cyc7XG5pbXBvcnQgeyBEZXZpY2VDb25uZWN0ZWRJbmZvIH0gZnJvbSAnLi9JbnRlcmZhY2VzJztcbmltcG9ydCB7IFRhcmdldENvbmZpZyB9IGZyb20gJy4vTWFuYWdlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERldmljZU1hbmFnZWQge1xuICBwcml2YXRlIG5hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSB0eXBlOiBzdHJpbmc7XG4gIHByaXZhdGUgc29ja2V0OiBTb2NrZXRJTy5Tb2NrZXQ7XG4gIHByaXZhdGUgcHJveGllczogU29ja2V0SU9DbGllbnQuU29ja2V0W10gPSBbXTtcbiAgcHJpdmF0ZSBwYXRjaDogYW55O1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihpbmZvOiBEZXZpY2VDb25uZWN0ZWRJbmZvKSB7XG4gICAgdGhpcy5zb2NrZXQgPSBpbmZvLnNvY2tldDtcbiAgICB0aGlzLm5hbWUgPSBpbmZvLm5hbWU7XG4gICAgdGhpcy50eXBlID0gaW5mby50eXBlO1xuICAgIHRoaXMucGF0Y2ggPSByZXF1aXJlKCdzb2NrZXRpby13aWxkY2FyZCcpKGlvLk1hbmFnZXIpO1xuXG4gICAgdGhpcy5zb2NrZXQub24oJ2Rpc2Nvbm5lY3QnLCAoKSA9PiB7XG4gICAgICB0aGlzLmRpc2Nvbm5lY3RQcm94aWVzKCk7XG4gICAgfSk7XG4gICAgdGhpcy5zb2NrZXQub24oJ3N0YXR1cycsIHRoaXMuZW1pdFN0YXR1c1RvUHJveGllcy5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXROYW1lKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cblxuICBwdWJsaWMgZ2V0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy50eXBlO1xuICB9XG5cbiAgcHVibGljIGdldFNvY2tldCgpIHtcbiAgICByZXR1cm4gdGhpcy5zb2NrZXQ7XG4gIH1cblxuICBwdWJsaWMgbWF0Y2hlc1RhcmdldCh0YXJnZXQ6IFRhcmdldENvbmZpZykge1xuICAgIHJldHVybiB0YXJnZXQubmFtZSA9PT0gdGhpcy5uYW1lIHx8IHRhcmdldC50eXBlID09PSB0aGlzLnR5cGU7XG4gIH1cblxuICBwdWJsaWMgc2VuZEFjdGlvbihhY3Rpb246IHN0cmluZywgcGF5bG9hZDogYW55KSB7XG4gICAgdGhpcy5zb2NrZXQuZW1pdChhY3Rpb24sIHBheWxvYWQpO1xuICB9XG5cbiAgcHVibGljIG9uU3RhdHVzKGZuOiAoc3RhdHVzOiBEZXZpY2VTdGF0dXMpID0+IHZvaWQpIHtcbiAgICB0aGlzLnNvY2tldC5vbignc3RhdHVzJywgZm4pO1xuICB9XG5cbiAgcHVibGljIG9mZlN0YXR1cyhmbjogKHN0YXR1czogRGV2aWNlU3RhdHVzKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5zb2NrZXQucmVtb3ZlTGlzdGVuZXIoJ3N0YXR1cycsIGZuKTtcbiAgfVxuXG4gIHB1YmxpYyBjb25uZWN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc29ja2V0LmNvbm5lY3RlZDtcbiAgfVxuXG4gIHB1YmxpYyBkZXN0cm95KCkge1xuICAgIHRoaXMuc29ja2V0LmRpc2Nvbm5lY3QoKTtcbiAgICB0aGlzLmRpc2Nvbm5lY3RQcm94aWVzKCk7XG4gIH1cbiAgcHVibGljIGFkZFByb3h5KHNlcnZlcnM6IERldmljZVNlcnZlckNvbmZpZ1tdKSB7XG4gICAgc2VydmVycy5mb3JFYWNoKGNvbmZpZyA9PiB7XG4gICAgICBjb25zdCBjbGllbnQgPSBpby5jb25uZWN0KGBodHRwOi8vJHtjb25maWcuaG9zdH06JHtjb25maWcucG9ydH1gLCB7XG4gICAgICAgIHF1ZXJ5OiB7XG4gICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgdGhpcy5pbml0UHJveHlNaWRkbGV3YXJlKGNsaWVudCk7XG4gICAgICB0aGlzLnByb3hpZXMucHVzaChjbGllbnQpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0UHJveHlNaWRkbGV3YXJlKHByb3h5OiBTb2NrZXRJT0NsaWVudC5Tb2NrZXQpIHtcbiAgICB0aGlzLnBhdGNoKHByb3h5KTtcbiAgICBwcm94eS5vbignKicsIChldmVudDogeyBkYXRhOiBhbnlbXSB9KSA9PiB7XG4gICAgICB0aGlzLnNvY2tldC5lbWl0KGV2ZW50LmRhdGEuc2hpZnQoKSwgLi4uZXZlbnQuZGF0YSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGVtaXRTdGF0dXNUb1Byb3hpZXMoc3RhdHVzOiBEZXZpY2VTdGF0dXMpIHtcbiAgICB0aGlzLnByb3hpZXMuZm9yRWFjaChwcm94eSA9PiB7XG4gICAgICBwcm94eS5lbWl0KCdzdGF0dXMnLCBzdGF0dXMpO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNjb25uZWN0UHJveGllcygpIHtcbiAgICB0aGlzLnByb3hpZXMuZm9yRWFjaChwcm94eSA9PiB7XG4gICAgICBwcm94eS5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==